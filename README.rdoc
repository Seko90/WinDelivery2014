	Projektname : WinDelivery 2014

Teammitglieder : 
Serkan Altin 	348694
Thomas Sauer 	323994
Hussein Hisin	

Beschreibung des Projekts: 
Uns ist aufgefallen, dass es zwar ein einheitliches Bestellformat für den Kunden gibt(z.b. Lieferservice.de), aber die Lieferanten keine einheitlichen Systeme haben um die Kunden zu verwalten. Unsere Webapplikation soll ein einfacher Einstieg in die Verwaltung von Kunden im über das Internet sein. 
Unsere Webapplikation soll Restaurant das Bearbeiten und Verwalten von Aufträgen in Bezug zur Lieferung von Bestellung an den Kunden vereinfachen.
Dieses Projekt ist übertragbar auf alle Restaurants mit Lieferservice. Unsere Webapplikation soll die Bestellung überschaubar und in der weiteren Entwicklung auch Statistiken bzw. Rechnungen online darstellbar machen. 

Beschreibung der technischen Umsetzung:
Für unsere Projekt benötigen wir sechs Datenbanken bzw. Modelle, die folgendermaßen heißen : 
- "User", Verwaltung der Mitarbeiter-Konten(mit Adminfunktion)
- "category", um Produkte eine bestimmte Kategorie zuzuordnen
- "customer", Verwaltung der Kundendatenbank
- "order", um die Bestellungen durchzuführen
- "order_item", enthalten die Produkte aus der Bestellung
- "product", die Produkte, vom Lieferanten die angeboten werden

Folgende Beziehungen haben die Modelle : 

"category":
has_many :products

"customer"
has_many :orders

"order":
belongs_to :customer
has_many :order_items
has_many :products, through: :order_items

"order_item":
belongs_to :order
belongs_to :product

"product": 
belongs_to :category
has_many :order_items
has_many :orders, through: :order_items

Folgende GEM´s und Funktionen werden genutzt : 

gem 'devise':
Um die Authentifizierung mithilfe von "devise" durchführen zu können. Veränderung wurden durchgeführt um eine CRUD-Funktion zu implementieren. Damit der Admin neue User erstellen kann, indem dieser eingeloggt ist.
Hier werden die Passwörter verschlüsselt in der Datenbank abgespeichert.
Die Authentifikation und Authorizierung ist gemäß unserer Projekt-Anforderung angepasst worden.


gem 'jquery-datatables-rails', github: 'rweng/jquery-datatables-rails'
gem 'jquery-ui-rails':

Um die Kundentabelle und Drag&Drop zu erstellen.

Zur Kundentabelle : 



Drag&Drop : 

Mit Hilfe von JQueryUI Draggable und Droppable ist es möglich, Produkte aus der Product-Datenbank herauszunehmen und in ein Feld zu packen. Nach Abschluss von Drag und Drop muss auf Bestellung abschliessen geklickt werden. Sobald dies erfolgt werden die Daten aus dem Droppable-Fenster entnommen und der Bestellung des Kunden hinzugefügt bzw. es wird eine Bestellung erstellt vom Kunden mit den ausgewählten Produkten.

Drucken : 

Mithilfe unserer Druckfunktion am Ende des Bestellprozesses ist es möglich, die wichtigen Informationen zur Bestellung zu drucken. Diese kann der Lieferant benötigen oder der Kunde fordern.

